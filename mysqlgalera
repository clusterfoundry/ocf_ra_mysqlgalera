#!/bin/bash
#######################################################################
# Initialization:


: ${OCF_FUNCTIONS=${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs}
. ${OCF_FUNCTIONS}
: ${__OCF_ACTION=$1}

HOSTNAME=`uname -n`
SST_AUTH="root:rootpass"
SST_METHOD="xtrabackup"
MYSQLD_DEFAULT_PARAM="--basedir=/usr --datadir=/var/lib/mysql --bind-address=0.0.0.0 --port=3306"
MYSQLD_SAFE_BIN="/usr/bin/mysqld_safe"
MYSQLD_BIN="/usr/sbin/mysqld"
FALSE=1
TRUE=0
RESOURCE_NAME=mysqlgalera
ra_log() {
	# parameter: ra_log (info|debug|err) "$message"
	local type=$1
	local message=$2

	echo "$message" | logger -t "ocf-mysqlgalera[$type]"
}
is_master() {
	local parent_log="${!#} -> ${FUNCNAME[0]}()"
	local master_node=`the_master_node "$parent_log"`
	
	if [ x"$master_node" == x"$HOSTNAME" ]; then
		ra_log debug "$parent_log -> exit TRUE"
		return $TRUE
	else
		ra_log debug "$parent_log -> exit FALSE"
		return $FALSE
	fi
}
the_master_node() {
	local parent_log="${!#} -> ${FUNCNAME[0]}()"
	if ocf_is_ms; then
		# running in cluster
		local cluster_masters=`/usr/sbin/crm_resource --list | grep -A2 "\[$RESOURCE_NAME\]" | grep 'Masters: ' | awk '{print $3}' `
		echo "$cluster_masters"
		ra_log debug "$parent_log -> ocf_is_ms=true -> cluster_masters=$cluster_masters -> exit OCF_SUCCESS/$OCF_SUCCESS"
		return $OCF_SUCCES
	else
		# not running as cluster
		ra_log debug "$parent_log -> ocf_is_ms=false -> exit OCF_SUCCESS/$OCF_SUCCESS"
		return $OCF_SUCCESS
	fi
	
	return $OCF_ERR_GENERIC
}
is_mysqld_running() {
	local parent_log="${!#} -> ${FUNCNAME[0]}()"
	local mysqld_pid=`pidof $MYSQLD_BIN`
	
	if [ x"$mysqld_pid" != x ]; then
		ra_log debug "$parent_log -> pidof $MYSQLD_BIN -> MYSQLD_PID=$mysqld_pid"
		return $OCF_SUCCESS
	fi
	
	ra_log debug "$parent_log -> pidof() $MYSQLD_BIN -> MYSQLD_PID=$mysqld_pid -> exit OCF_NOT_RUNNING/$OCF_NOT_RUNNING"
	return $OCF_NOT_RUNNING
}
wait_for_mysqld() {
	local loop_limit=$1
	local loop_counter=0
	local rc_is_mysqld_running=$FALSE
	local parent_log="${!#} -> ${FUNCNAME[0]}() loop_limit=$loop_limit"
	
	while [ $rc_is_mysqld_running -eq $FALSE -a $loop_counter -le $loop_limit ]; do
		loop_counter=$((loop_counter+1))
		is_mysqld_running
		rc_is_mysqld_running=$?
		ra_log debug "$parent_log -> loop#$loop_counter -> is_mysqld_running=$rc_is_mysqld_running"
		if [ $is_mysqld_running -eq $OCF_SUCCESS ]; then
			ra_log debug "$parent_log -> loop#$loop_counter -> is_mysqld_running=$rc_is_mysqld_running -> return OCF_SUCCESS/$OCF_SUCCESS"
			return $OCF_SUCCESS
		fi
		sleep 1
	done
	
	return $OCF_NOT_RUNNING
}
run_as() {
	# parameter: run_as (master|slave|none) [master_hostname] "$parent_log"
	local mode=$1
	local master=$2
	local extra_args=
	local is_ms=$FALSE

	# check if mysql service will be running as master, slave or single/independent instance
	case $mode in
		master)
			local parent_log="${!#} -> ${FUNCNAME[0]}() mode=$mode"
			extra_args="$extra_args --wsrep_provider=/usr/lib64/libgalera_smm.so"
			extra_args="$extra_args --wsrep_cluster_name=cluster1"
			extra_args="$extra_args --wsrep_cluster_address=\"gcomm://\""
			extra_args="$extra_args --wsrep_sst_auth=$SST_AUTH"
			extra_args="$extra_args --wsrep_sst_method=$SST_METHOD"
			ra_log debug "$parent_log -> case mode=$mode -> sst_auth=$SST_AUTH,sst_method=$SST_METHOD"
		;;
		slave)
			local parent_log="${!#} -> ${FUNCNAME[0]}() mode=$mode,master_hostname=$master"
			extra_args="$extra_args --wsrep_provider=/usr/lib64/libgalera_smm.so"
			extra_args="$extra_args --wsrep_cluster_name=cluster1"
			extra_args="$extra_args --wsrep_cluster_address=\"gcomm://$master\""
			extra_args="$extra_args --wsrep_sst_auth=$SST_AUTH"
			extra_args="$extra_args --wsrep_sst_method=$SST_METHOD"
			ra_log debug "$parent_log -> case mode=$mode -> master_node=$master,sst_auth=$SST_AUTH,sst_method=$SST_METHOD"
		;;
		*)
			local parent_log="${!#} -> ${FUNCNAME[0]}() mode=$mode"
			ra_log debug "$parent_log"
		;;
	esac
	
	$MYSQLD_SAFE_BIN $MYSQLD_DEFAULT_PARAM $extra_args >/dev/null 2>&1 &
	local rc=$?
	ra_log debug "$parent_log -> $MYSQLD_SAFE_BIN $MYSQLD_DEFAULT_PARAM $extra_args -> return $rc"
	
	if [ $rc -ne 0 ]; then
		ra_log debug "$parent_log -> exec $MYSQLD_SAFE_BIN -> return $rc -> exit OCF_ERR_GENERIC/$OCF_ERR_GENERIC"
		return $OCF_ERR_GENERIC
	fi
	
	# mysql runs successfully. We should wait for the PID to appear
	wait_for_mysqld 20 $parent_log
	local rc_wait_for_mysqld=$?
	
	if [ $rc_wait_for_mysqld -ne $OCF_SUCCESS ]; then
		ra_log debug "$parent_log -> wait_for_mysqld -> returns $rc_wait_for_mysqld"
		return $OCF_ERR_GENERIC
	fi
	
	ra_log debug "$parent_log -> exit OCF_SUCCESS/$OCF_SUCCESS"
	return $OCF_SUCCESS
}
ra_stop() {
	# Parameter: ra_stop() timeout "$parent_log"
	local loop_limit=$1
	local loop_counter=0
	local is_running=$TRUE
	local parent_log="${!#} -> ${FUNCNAME[0]}() loop_limit=$loop_limit"

	while [ $is_running -eq $TRUE -a $loop_counter -le $loop_limit ]; do
		# Run this loop until mysqld is running OR hasn't reached the timeout
		loop_counter=$((loop_counter+1))
		ra_log debug "$parent_log -> is_running=$is_running,loop_limit=$loop_limit,loop_counter=$loop_counter"
		local mysqld_pid=`pidof $MYSQLD_BIN`
		local rc_pidof=$?
		
		if [ $rc_pidof -eq $TRUE ]; then
			# mysqld running
			for pid in $mysqld_pid; do
				kill $pid >/dev/null 2>&1
				ra_log debug "$parent_log -> is_running=$is_running,loop_limit=$loop_limit,loop_counter=$loop_counter -> kill $pid -> return $?"
			done
		else
			# no instance of mysqld running
			ra_log debug "$parent_log -> pidof $MYSQLD_BIN -> is_running=false,return $rc_pidof -> exit OCF_SUCCESS/$OCF_SUCCESS"
			return $OCF_SUCCESS
		fi
		sleep 1
	done
	
	ra_log debug "$parent_log -> exit OCF_SUCCESS/$OCF_SUCCESS"
	return $OCF_SUCCESS
}
ra_start() {
	local parent_log="${!#} -> ${FUNCNAME[0]}()"
	local rc_ocf_is_ms
	ocf_is_ms
	rc_ocf_is_ms=$?

	if is_mysqld_running "$parent_log"; then
		# There is a mysqld instance running
		ra_stop 10 "$parent_log"
	fi

	if [ $rc_ocf_is_ms -eq $TRUE ]; then
		# Resource running in Master/Slave
		local rc_the_master_node
		local master_node=`the_master_node "$parent_log"`
		ra_log debug "$parent_log -> ocf_is_ms()=true -> the_master_node()=$master_node"

		if [ x"$master_node" == x"$HOSTNAME" -o x"$master_node" == x"" ]; then
			# We are the master
			run_as master "$parent_log -> ocf_is_ms()=true -> the_master_node()=$master_node,hostname=$HOSTNAME -> run_as() master"
			return $?
		elif [ x"$master_node" == x"" ]; then
			# The resource is currently in master/slave node but no node is currently elected as master
			run_as master "$parent_log -> ocf_is_ms()=true -> the_master_node()=$master_node,hostname=$HOSTNAME -> run_as() master"
			return $?
		else
			# We are slave
			run_as slave $master_node "$parent_log -> ocf_is_ms()=true -> the_master_node()=$master_node,hostname=$HOSTNAME -> run_as() slave"
			return $?
		fi
	else
		# Resource running on single instance(without replication)
		run_as none "$parent_log -> ocf_is_ms()=false -> run_as none"
		return $?
	fi
}
ra_monitor() {
	local parent_log="${!#} -> ${FUNCNAME[0]}()"

	if is_mysqld_running "$parent_log"; then
		if is_master "$parent_log"; then
			return $OCF_RUNNING_MASTER
		else
			# mysqld running, cluster mode is master
			return $OCF_SUCCESS
		fi			
	else
		ra_log debug "$parent_log -> exit OCF_NOT_RUNNING/$OCF_NOT_RUNNING"
		return $OCF_NOT_RUNNING
	fi
	
	return $OCF_ERR_GENERIC
}
ra_metadata() {
	local parent_log="${!#} -> ${FUNCNAME[0]}()"
	ra_log debug "$parent_log"
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="MySQL-Galera" version="0.1">
<version>0.1</version>

<longdesc lang="en">
This is an example resource agent that impliments two states
</longdesc>
<shortdesc lang="en">Example stateful resource agent</shortdesc>

<actions>
<action name="start"   timeout="20" />
<action name="stop"    timeout="60" />
<action name="monitor" depth="0" timeout="30" interval="20" />
<action name="monitor" role="Master" depth="0" timeout="30" interval="10" />
<action name="monitor" role="Slave" depth="0" timeout="30" interval="30" />
<action name="promote" timeout="120" />
<action name="demote" timeout="120" />
<action name="meta-data"  timeout="5" />
<action name="validate-all"  timeout="10" />
</actions>
</resource-agent>
END
}
ra_validate() {
	local parent_log="${!#} -> ${FUNCNAME[0]}()"
	ra_log debug "$parent_log -> exit OCF_SUCCESS/$OCF_SUCCESS"
	return $OCF_SUCCESS
}

case $__OCF_ACTION in
	meta-data)	ra_metadata "CRM";;
	start)		ra_start "CRM";;
	stop)		ra_stop 10 "CRM";;
	monitor)	ra_monitor "CRM";;
	validate-all)	ra_validate "CRM";;
	usage|help)	exit $OCF_SUCCESS;;
	*)		exit $OCF_ERR_UNIMPLEMENTED;;
esac
